/*
 * convenience functions for loading shaders, and loading meshes in a simple JSON format.
 *
 * loadFile/loadFiles from http://stackoverflow.com/questions/4878145/javascript-and-webgl-external-scripts
 * loadMesh adapted from various loaders in http://threejs.org
 */
define(["require", "exports"], function (require, exports) {
    function loadFile(url, data, callback, errorCallback) {
        // Set up an asynchronous request
        var request = new XMLHttpRequest();
        request.open('GET', url, true);
        // Hook the event that gets called as the request progresses
        request.onreadystatechange = function () {
            // If the request is "DONE" (completed or failed)
            if (request.readyState == 4) {
                // If we got HTTP status 200 (OK)
                if (request.status == 200) {
                    callback(request.responseText, data);
                }
                else {
                    errorCallback(url);
                }
            }
        };
        request.send(null);
    }
    function loadFiles(urls, callback, errorCallback) {
        var numUrls = urls.length;
        var numComplete = 0;
        var result = [];
        // Callback for a single file
        function partialCallback(text, urlIndex) {
            result[urlIndex] = text;
            numComplete++;
            // When all files have downloaded
            if (numComplete == numUrls) {
                callback(result);
            }
        }
        for (var i = 0; i < numUrls; i++) {
            loadFile(urls[i], i, partialCallback, errorCallback);
        }
    }
    exports.loadFiles = loadFiles;
    // if there is a current request outstanding, this will be set to it
    var currentRequest = undefined;
    function loadMesh(url, onLoad, onProgress, onError) {
        // if there is a request in progress, abort it.
        if (currentRequest !== undefined) {
            request.abort();
            currentRequest = undefined;
        }
        // set up the new request	
        var request = new XMLHttpRequest();
        request.open('GET', url, true);
        currentRequest = request; // save it, so we can abort if another request is made by the user
        request.addEventListener('load', function (event) {
            // finished with the current request now
            currentRequest = undefined;
            //var json = this.response;  /// already in JSON format, don't need: 
            var json = JSON.parse(this.response);
            // we'll put a metadata field in the object, just to be sure it's one of ours
            var metadata = json.metadata;
            if (metadata !== undefined) {
                if (metadata.type !== 'triangles') {
                    console.error('Loader: ' + url + ' should be a "triangles" files.');
                    return;
                }
            }
            else {
                console.error('Loader: ' + url + ' does not have a metadata field.');
                return;
            }
            var object = validate(json, url);
            if (object !== undefined) {
                console.log("Loader: " + url + " contains " + object.v.length + " vertices " +
                    " and " + object.t.length + " triangles.");
            }
            onLoad(object);
        }, false);
        if (onProgress !== undefined) {
            request.addEventListener('progress', function (event) {
                onProgress(event);
            }, false);
        }
        if (onError !== undefined) {
            request.addEventListener('error', function (event) {
                currentRequest = undefined; // request failed, clear the current request field
                if (onError)
                    onError(event);
            }, false);
        }
        // ask for a "json" file
        //request.responseType = "json";
        request.send(null);
        return request;
    }
    exports.loadMesh = loadMesh;
    // validate the received JSON, just to make sure it's what we are expecting (and thus avoid
    // bugs down the road in our code)
    function validate(json, url) {
        if (json instanceof Object &&
            json.hasOwnProperty('t') &&
            json.t instanceof Array &&
            json.hasOwnProperty('v') &&
            json.v instanceof Array) {
            var numV = json.v.length;
            for (var i in json.t) {
                if (!(json.t[i] instanceof Array &&
                    json.t[i].length == 3 &&
                    typeof json.t[i][0] == "number" &&
                    typeof json.t[i][1] == "number" &&
                    typeof json.t[i][2] == "number" &&
                    json.t[i][0] < numV &&
                    json.t[i][1] < numV &&
                    json.t[i][2] < numV)) {
                    console.log("Loader: json file " + url + ", invalid t[" + i + "].");
                    return undefined;
                }
            }
            for (var i in json.v) {
                if (!(json.v[i] instanceof Array &&
                    json.v[i].length == 3 &&
                    typeof json.v[i][0] == "number" &&
                    typeof json.v[i][1] == "number" &&
                    typeof json.v[i][2] == "number")) {
                    console.log("Loader: json file " + url + ", invalid v[" + i + "].");
                    return undefined;
                }
                i++;
            }
            return json;
        }
        else {
            console.log("Loader: json file " + url + " does not have .t and .v members.");
            return undefined;
        }
    }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvYWRlci50cyJdLCJuYW1lcyI6WyJsb2FkRmlsZSIsImxvYWRGaWxlcyIsImxvYWRGaWxlcy5wYXJ0aWFsQ2FsbGJhY2siLCJsb2FkTWVzaCIsInZhbGlkYXRlIl0sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7R0FLRzs7SUFHSCxrQkFBa0IsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYTtRQUNuREEsaUNBQWlDQTtRQUNqQ0EsSUFBSUEsT0FBT0EsR0FBR0EsSUFBSUEsY0FBY0EsRUFBRUEsQ0FBQ0E7UUFDbkNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLEdBQUdBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBRS9CQSw0REFBNERBO1FBQzVEQSxPQUFPQSxDQUFDQSxrQkFBa0JBLEdBQUdBO1lBQzVCLGlEQUFpRDtZQUNqRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLGlDQUFpQztnQkFDakMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUMzQixRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQTtnQkFDckMsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDUCxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3BCLENBQUM7WUFDRixDQUFDO1FBQ0YsQ0FBQyxDQUFDQTtRQUVGQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNwQkEsQ0FBQ0E7SUFFRCxtQkFBMEIsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhO1FBQ3REQyxJQUFJQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUMxQkEsSUFBSUEsV0FBV0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDcEJBLElBQUlBLE1BQU1BLEdBQUdBLEVBQUVBLENB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QSxDQUFDQSxDQUFDQSxDQUFDQTtZQUV4QkEsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFDNUJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN0QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsWUFBWUEsS0FBS0E7b0JBQy9CQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxJQUFJQSxDQUFDQTtvQkFDckJBLE9BQU9BLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLFFBQVFBO29CQUMvQkEsT0FBT0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsUUFBUUE7b0JBQy9CQSxPQUFPQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxRQUFRQTtvQkFDL0JBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBO29CQUNuQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUE7b0JBQ25CQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDdkJBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLG9CQUFvQkEsR0FBR0EsR0FBR0EsR0FBR0EsY0FBY0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ3BFQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQTtnQkFDbEJBLENBQUNBO1lBQ0ZBLENBQUNBO1lBQ0RBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN0QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsWUFBWUEsS0FBS0E7b0JBQy9CQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxJQUFJQSxDQUFDQTtvQkFDckJBLE9BQU9BLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLFFBQVFBO29CQUMvQkEsT0FBT0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsUUFBUUE7b0JBQy9CQSxPQUFPQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDbkNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLG9CQUFvQkEsR0FBR0EsR0FBR0EsR0FBR0EsY0FBY0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ3BFQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQTtnQkFDbEJBLENBQUNBO2dCQUNEQSxDQUFDQSxFQUFFQSxDQUFDQTtZQUNMQSxDQUFDQTtZQUNEQSxNQUFNQSxDQUFPQSxJQUFJQSxDQUFDQTtRQUNuQkEsQ0FBQ0E7UUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDUEEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxHQUFHQSxHQUFHQSxtQ0FBbUNBLENBQUNBLENBQUNBO1lBQzlFQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQTtRQUNsQkEsQ0FBQ0E7SUFDRkEsQ0FBQ0EiLCJmaWxlIjoibG9hZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKlxuICogY29udmVuaWVuY2UgZnVuY3Rpb25zIGZvciBsb2FkaW5nIHNoYWRlcnMsIGFuZCBsb2FkaW5nIG1lc2hlcyBpbiBhIHNpbXBsZSBKU09OIGZvcm1hdC5cbiAqIFxuICogbG9hZEZpbGUvbG9hZEZpbGVzIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80ODc4MTQ1L2phdmFzY3JpcHQtYW5kLXdlYmdsLWV4dGVybmFsLXNjcmlwdHNcbiAqIGxvYWRNZXNoIGFkYXB0ZWQgZnJvbSB2YXJpb3VzIGxvYWRlcnMgaW4gaHR0cDovL3RocmVlanMub3JnXG4gKi9cblxuXG5mdW5jdGlvbiBsb2FkRmlsZSh1cmwsIGRhdGEsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG5cdC8vIFNldCB1cCBhbiBhc3luY2hyb25vdXMgcmVxdWVzdFxuXHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXHRyZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG5cblx0Ly8gSG9vayB0aGUgZXZlbnQgdGhhdCBnZXRzIGNhbGxlZCBhcyB0aGUgcmVxdWVzdCBwcm9ncmVzc2VzXG5cdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vIElmIHRoZSByZXF1ZXN0IGlzIFwiRE9ORVwiIChjb21wbGV0ZWQgb3IgZmFpbGVkKVxuXHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT0gNCkge1xuXHRcdFx0Ly8gSWYgd2UgZ290IEhUVFAgc3RhdHVzIDIwMCAoT0spXG5cdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT0gMjAwKSB7XG5cdFx0XHRcdGNhbGxiYWNrKHJlcXVlc3QucmVzcG9uc2VUZXh0LCBkYXRhKVxuXHRcdFx0fSBlbHNlIHsgLy8gRmFpbGVkXG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sodXJsKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0cmVxdWVzdC5zZW5kKG51bGwpOyAgICBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRGaWxlcyh1cmxzLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuXHR2YXIgbnVtVXJscyA9IHVybHMubGVuZ3RoO1xuXHR2YXIgbnVtQ29tcGxldGUgPSAwO1xuXHR2YXIgcmVzdWx0ID0gW107XG5cblx0Ly8gQ2FsbGJhY2sgZm9yIGEgc2luZ2xlIGZpbGVcblx0ZnVuY3Rpb24gcGFydGlhbENhbGxiYWNrKHRleHQsIHVybEluZGV4KSB7XG5cdFx0cmVzdWx0W3VybEluZGV4XSA9IHRleHQ7XG5cdFx0bnVtQ29tcGxldGUrKztcblxuXHRcdC8vIFdoZW4gYWxsIGZpbGVzIGhhdmUgZG93bmxvYWRlZFxuXHRcdGlmIChudW1Db21wbGV0ZSA9PSBudW1VcmxzKSB7XG5cdFx0XHRjYWxsYmFjayhyZXN1bHQpO1xuXHRcdH1cblx0fVxuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVXJsczsgaSsrKSB7XG5cdFx0bG9hZEZpbGUodXJsc1tpXSwgaSwgcGFydGlhbENhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcblx0fVxufVxuXG5cblxuLypcbiAqIExvYWQgYSBNZXNoIGZpbGUgYXN5bmNocm9ub3VzbHkgZnJvbSBhIGZpbGUgc3RvcmVkIG9uIHRoZSB3ZWIuXG4gKiBUaGUgcmVzdWx0cyB3aWxsIGJlIHByb3ZpZGVkIHRvIHRoZSBcIm9uTG9hZFwiIGNhbGxiYWNrLCBhbmQgYXJlIGEgTWVzaCBvYmplY3RcbiAqIHdpdGggYW4gYXJyYXkgb2YgdmVydGljZXMgYW5kIGFuIGFycmF5IG9mIHRyaWFuZ2xlcyBhcyBtZW1iZXJzLlxuICogXG4gKiBGb3IgZXhhbXBsZTogIFxuICogdmFyIG9uTG9hZCA9IGZ1bmN0aW9uIChtZXNoOiBsb2FkZXIuTWVzaCkge1xuICogIFx0Y29uc29sZS5sb2coXCJnb3QgYSBtZXNoOiBcIiArIG1lc2gpO1xuICogfVxuICogdmFyIG9uUHJvZ3Jlc3MgPSBmdW5jdGlvbiAocHJvZ3Jlc3M6IFByb2dyZXNzRXZlbnQpIHtcbiAqICBcdGNvbnNvbGUubG9nKFwibG9hZGluZzogXCIgKyBwcm9ncmVzcy5sb2FkZWQgKyBcIiBvZiBcIiArIHByb2dyZXNzLnRvdGFsICsgXCIuLi5cIik7XG4gKiB9XG4gKiB2YXIgb25FcnJvciA9IGZ1bmN0aW9uIChlcnJvcjogRXJyb3JFdmVudCkge1xuICogIFx0Y29uc29sZS5sb2coXCJlcnJvciEgXCIgKyBlcnJvcik7XG4gKiB9XG4gKiBcbiAqIGxvYWRlci5sb2FkTWVzaChcIm1vZGVscy92ZW51cy5qc29uXCIsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvcik7XG4gKiBcbiAqL1xuXG5leHBvcnQgdHlwZSBWZXJ0ZXggPSBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG5leHBvcnQgdHlwZSBUcmlhbmdsZSA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcblxuZXhwb3J0IGludGVyZmFjZSBNZXNoIHtcblx0djogQXJyYXk8VmVydGV4Pjtcblx0dDogQXJyYXk8VHJpYW5nbGU+O1xufVxuXG4vLyBpZiB0aGVyZSBpcyBhIGN1cnJlbnQgcmVxdWVzdCBvdXRzdGFuZGluZywgdGhpcyB3aWxsIGJlIHNldCB0byBpdFxudmFyIGN1cnJlbnRSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZE1lc2ggKCB1cmw6IHN0cmluZywgXG5cdFx0XHRcdFx0b25Mb2FkOiAoZGF0YTogYW55KSA9PiB2b2lkLCBcblx0XHRcdFx0XHRvblByb2dyZXNzPzogKHByb2dyZXNzOiBQcm9ncmVzc0V2ZW50KSA9PiB2b2lkLCBcblx0XHRcdFx0XHRvbkVycm9yPzogKGVycm9yOiBFcnJvckV2ZW50KSA9PiB2b2lkICk6IFhNTEh0dHBSZXF1ZXN0IHtcblxuICAgIC8vIGlmIHRoZXJlIGlzIGEgcmVxdWVzdCBpbiBwcm9ncmVzcywgYWJvcnQgaXQuXG4gICAgaWYgKGN1cnJlbnRSZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXF1ZXN0LmFib3J0KCk7XG5cdFx0Y3VycmVudFJlcXVlc3QgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBzZXQgdXAgdGhlIG5ldyByZXF1ZXN0XHRcblx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0cmVxdWVzdC5vcGVuKCAnR0VUJywgdXJsLCB0cnVlICk7XG5cdGN1cnJlbnRSZXF1ZXN0ID0gcmVxdWVzdDsgIC8vIHNhdmUgaXQsIHNvIHdlIGNhbiBhYm9ydCBpZiBhbm90aGVyIHJlcXVlc3QgaXMgbWFkZSBieSB0aGUgdXNlclxuXHRcblx0cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cdFx0Ly8gZmluaXNoZWQgd2l0aCB0aGUgY3VycmVudCByZXF1ZXN0IG5vd1xuXHRcdGN1cnJlbnRSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuXHRcdFxuXHRcdC8vdmFyIGpzb24gPSB0aGlzLnJlc3BvbnNlOyAgLy8vIGFscmVhZHkgaW4gSlNPTiBmb3JtYXQsIGRvbid0IG5lZWQ6IFxuXHRcdHZhciBqc29uID0gSlNPTi5wYXJzZSggdGhpcy5yZXNwb25zZSApO1xuXG5cdFx0Ly8gd2UnbGwgcHV0IGEgbWV0YWRhdGEgZmllbGQgaW4gdGhlIG9iamVjdCwganVzdCB0byBiZSBzdXJlIGl0J3Mgb25lIG9mIG91cnNcblx0XHR2YXIgbWV0YWRhdGEgPSBqc29uLm1ldGFkYXRhO1xuXHRcdGlmICggbWV0YWRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggbWV0YWRhdGEudHlwZSAhPT0gJ3RyaWFuZ2xlcycgKSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdMb2FkZXI6ICcgKyB1cmwgKyAnIHNob3VsZCBiZSBhIFwidHJpYW5nbGVzXCIgZmlsZXMuJyApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoICdMb2FkZXI6ICcgKyB1cmwgKyAnIGRvZXMgbm90IGhhdmUgYSBtZXRhZGF0YSBmaWVsZC4nICk7XG5cdFx0XHRyZXR1cm47XHRcdFx0XHRcblx0XHR9XG5cblx0XHR2YXIgb2JqZWN0ID0gdmFsaWRhdGUoIGpzb24sIHVybCApO1xuXHRcdFxuXHRcdGlmIChvYmplY3QgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc29sZS5sb2coXCJMb2FkZXI6IFwiICsgdXJsICsgXCIgY29udGFpbnMgXCIgKyBvYmplY3Qudi5sZW5ndGggKyBcIiB2ZXJ0aWNlcyBcIiArXG5cdFx0XHRcdFwiIGFuZCBcIiArIG9iamVjdC50Lmxlbmd0aCArIFwiIHRyaWFuZ2xlcy5cIilcblx0XHR9XG5cdFx0b25Mb2FkKCBvYmplY3QgKTtcblx0fSwgZmFsc2UgKTtcblxuXHRpZiAoIG9uUHJvZ3Jlc3MgIT09IHVuZGVmaW5lZCApIHtcblx0XHRyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoICdwcm9ncmVzcycsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cdFx0XHRvblByb2dyZXNzKCBldmVudCApO1xuXHRcdH0sIGZhbHNlICk7XG5cdH1cblxuXHRpZiAoIG9uRXJyb3IgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgZnVuY3Rpb24gKCBldmVudCApIHtcblx0XHRcdGN1cnJlbnRSZXF1ZXN0ID0gdW5kZWZpbmVkOyAvLyByZXF1ZXN0IGZhaWxlZCwgY2xlYXIgdGhlIGN1cnJlbnQgcmVxdWVzdCBmaWVsZFxuXHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggZXZlbnQgKTtcblx0XHR9LCBmYWxzZSApO1xuXHR9XG5cblx0Ly8gYXNrIGZvciBhIFwianNvblwiIGZpbGVcblx0Ly9yZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IFwianNvblwiO1xuXHRyZXF1ZXN0LnNlbmQoIG51bGwgKTtcblxuXHRyZXR1cm4gcmVxdWVzdDtcbn1cblxuLy8gdmFsaWRhdGUgdGhlIHJlY2VpdmVkIEpTT04sIGp1c3QgdG8gbWFrZSBzdXJlIGl0J3Mgd2hhdCB3ZSBhcmUgZXhwZWN0aW5nIChhbmQgdGh1cyBhdm9pZFxuLy8gYnVncyBkb3duIHRoZSByb2FkIGluIG91ciBjb2RlKVxuZnVuY3Rpb24gdmFsaWRhdGUoanNvbjogYW55LCB1cmw6IHN0cmluZyk6IE1lc2gge1xuXHRpZiAoanNvbiBpbnN0YW5jZW9mIE9iamVjdCAmJiBcblx0XHRcdGpzb24uaGFzT3duUHJvcGVydHkoJ3QnKSAmJlxuXHRcdFx0anNvbi50IGluc3RhbmNlb2YgQXJyYXkgJiYgXHRcblx0XHRcdGpzb24uaGFzT3duUHJvcGVydHkoJ3YnKSAmJlxuXHRcdFx0anNvbi52IGluc3RhbmNlb2YgQXJyYXkpIHtcblxuXHQgICAgdmFyIG51bVYgPSBqc29uLnYubGVuZ3RoO1xuXHRcdGZvciAodmFyIGkgaW4ganNvbi50KSB7XG5cdFx0XHRpZiAoIShqc29uLnRbaV0gaW5zdGFuY2VvZiBBcnJheSAmJlxuXHRcdFx0XHRqc29uLnRbaV0ubGVuZ3RoID09IDMgJiZcblx0XHRcdFx0dHlwZW9mIGpzb24udFtpXVswXSA9PSBcIm51bWJlclwiICYmXG5cdFx0XHRcdHR5cGVvZiBqc29uLnRbaV1bMV0gPT0gXCJudW1iZXJcIiAmJlxuXHRcdFx0XHR0eXBlb2YganNvbi50W2ldWzJdID09IFwibnVtYmVyXCIgJiYgXG5cdFx0XHRcdGpzb24udFtpXVswXSA8IG51bVYgJiZcblx0XHRcdFx0anNvbi50W2ldWzFdIDwgbnVtViAmJlxuXHRcdFx0XHRqc29uLnRbaV1bMl0gPCBudW1WKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkxvYWRlcjoganNvbiBmaWxlIFwiICsgdXJsICsgXCIsIGludmFsaWQgdFtcIiArIGkgKyBcIl0uXCIpO1xuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1x0XHRcdFx0XHRcdCAgXG5cdFx0XHR9XG5cdFx0fSBcblx0XHRmb3IgKHZhciBpIGluIGpzb24udikge1xuXHRcdFx0aWYgKCEoanNvbi52W2ldIGluc3RhbmNlb2YgQXJyYXkgJiZcblx0XHRcdFx0anNvbi52W2ldLmxlbmd0aCA9PSAzICYmXG5cdFx0XHRcdHR5cGVvZiBqc29uLnZbaV1bMF0gPT0gXCJudW1iZXJcIiAmJlxuXHRcdFx0XHR0eXBlb2YganNvbi52W2ldWzFdID09IFwibnVtYmVyXCIgJiZcblx0XHRcdFx0dHlwZW9mIGpzb24udltpXVsyXSA9PSBcIm51bWJlclwiKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkxvYWRlcjoganNvbiBmaWxlIFwiICsgdXJsICsgXCIsIGludmFsaWQgdltcIiArIGkgKyBcIl0uXCIpO1xuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1x0XHRcdFx0XHRcdCAgXG5cdFx0XHR9XG5cdFx0XHRpKys7XG5cdFx0fSBcblx0XHRyZXR1cm4gPE1lc2g+anNvbjsgIFxuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUubG9nKFwiTG9hZGVyOiBqc29uIGZpbGUgXCIgKyB1cmwgKyBcIiBkb2VzIG5vdCBoYXZlIC50IGFuZCAudiBtZW1iZXJzLlwiKTtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
